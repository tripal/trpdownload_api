<?php

namespace Drupal\trpdownload_api\TripalDownload;

/**
 * Interface for tripal_download plugins.
 */
interface TripalDownloadInterface {

  /**
   * Generates the file to be downloaded based on a set of variables.
   * The variables are often provided through the route.
   *
   * @param array $variables
   *   An array of variables that this particular download implementation
   *   will use to generate the download file. It is recommeded that these
   *   be consistent and that different parameter sets be separate download
   *   implementation.
   *
   * @param int $job_id
   *   The Tripal Job ID that the file will be generated in.
   */
  public function generate_file(array $variables, int $job_id = NULL);

  /**
   * Returns a summary of the download file being generated.
   *
   * This is usually called on the download page to provide information to the
   * user about the variables being passed in. It should be relatively quick
   * (i.e. not too compute/query heavy).
   *
   * @return array
   *   Returns a Drupal render array which summarizes the variables
   *   for this download instance.
   */
  public function summarize_download();

  /**
   * Returns the file name to use for a particular download file.
   *
   * This method will be called when preparing variables for generate_file()
   * and summarize_download().
   *
   * @param array $options
   *   An array of options for this method. Supported options include:
   *     - include_path (boolean): indicates whether the returned filename
   *       should include the full path or not.
   * @return string
   *   The filename for the downloaded file, with or without the full path.
   */
  public function get_filename(array $options = []);

  /**
   * Returns the file suffix to be used for a particular download file.
   *
   * It is recommended to set a single file suffix in the annotation for your
   * plugin, in which case, you should not need to override this method.
   *
   * This method is called by get_filename().
   *
   * @return string
   *   The suffix indicated file type to append to the download file
   *   NOT INCLUDING THE DOT `.`
   */
  protected function get_file_suffix();

  /**
   * Returns a human-readable label for the format.
   *
   * It is recommended to set a single format label in the annotation for your
   * plugin, in which case, you should not need to override this method.
   *
   * This method is called by summarize_download().
   *
   * @return string
   *   A short label for the format of the file.
   */
  public function get_format();

  /****************************************************************************
   * @section
   * Getter Methods
   */

  /**
   * Returns the human-readable name of this download implementation.
   *
   * This will be used in future administrative interfaces and as a default
   * in user-facing pages.
   *
   * Example: Tool Name Data Download
   *
   * @return string
   *   The translated title.
   */
  public function label();

  /**
   * Returns the human-readable description of the format the downloadable file will be in.
   *
   * This will be used in future administrative interfaces and as a default
   * in user-facing pages.
   *
   * Example: Comma-Separated Values
   *
   * @return string
   *   The translated format label.
   */
  public function format_label();

  /**
   * Returns the suffix for the file that is produced.
   *
   * This will be appended to the generated file after a period and provided
   * to the user.
   *
   * Example: csv
   *
   * @return string
   *   The file suffix.
   */
  public function file_suffix();

  /**
   * Returns the description of this download implementation.
   *
   * Example: Provides download of data generated by a given usage of Tool Name in a tabular format.
   *
   * @return string
   *   The translated description.
   */
  public function description();

}
